#include <algorithm>

#include "src/custom/transformer/model/gpt_encoder.h"
#include "src/custom/transformer/proto/gpt_weight.h"
#include "src/custom/transformer/util.h"
const lab::nmt::OperationType optype = lab::nmt::OperationType::FP16;

int main(int argc, char* argv[]) {
  // load model weights from proto  
  cudaStream_t stream_;
  cublasHandle_t hd_;
  cudaSetDevice(0);
  cudaStreamCreate(&stream_);
  cublasCreate(&hd_);
  cublasSetStream(hd_, stream_);

  lab::nmt::GptWeight<optype> tw_;
  std::string res = tw_.initializing(argv[1]);  // proto path
  if (!res.empty()) {
    std::cout << res << std::endl;
    return 0;
  }

  // init encoder
  // use thrust vector to avoid manage gpu memory by hand
  int max_batch_size = 128;
  thrust::device_vector<int> d_input_ =
      std::vector<int>(max_batch_size * tw_._max_step, 0);
  thrust::device_vector<float> d_ppl_ =
      std::vector<float>(max_batch_size, 0.f);

  std::shared_ptr<lab::nmt::GptEncoder<optype>> encoder_ =
      std::make_shared<lab::nmt::GptEncoder<optype>>(
          max_batch_size,
          reinterpret_cast<int *>(thrust::raw_pointer_cast(d_input_.data())),
          reinterpret_cast<float *>(
              thrust::raw_pointer_cast(d_ppl_.data())),
          tw_, stream_, hd_);

  res = encoder_->check();
  if (!res.empty()) {
    std::cout << res << std::endl;
    return 1;
  }

  int buf_bytesize = encoder_->compute_buffer_bytesize();
  thrust::device_vector<int> d_buf_ =
      std::vector<int>(buf_bytesize / sizeof(int) + 1, 0);
  encoder_->init_buffer(
      reinterpret_cast<void*>(thrust::raw_pointer_cast(d_buf_.data())));
  cudaStreamSynchronize(stream_);

  int batch_size = 32;
  int batch_seq_len = 32;
  //int tt = 10;
  //std::vector<int> host_input;
  //for(int i = 0; i <  batch_size; i++) {
  //  for(int j = 0; j <  batch_seq_len; j++) {
  //    host_input.push_back(++tt);
  //  }
  //}

  for (int i = 0; i < 10; i++) {
    std::vector<int> host_input = {
	    2, 615, 4260, 435, 500, 168, 735, 260, 4, 320, 735, 7, 445, 17, 984, 477, 69, 441, 109,
	    10, 11, 252, 7, 56, 788, 181, 3, 0, 0, 0, 0, 0, 2, 615, 4260, 168, 735, 260, 4, 320,
	    735, 7, 445, 17, 984, 477, 69, 441, 109, 10, 11, 252, 7, 56, 788, 181, 3, 0, 0, 0, 0, 0,
	    0, 0, 2, 615, 2785, 133, 189, 4, 680, 961, 214, 524, 220, 53, 4, 187, 2362, 1610, 1692,
	    67, 12, 35, 861, 19, 21, 245, 143, 3, 0, 0, 0, 0, 0, 0, 2, 219, 1301, 1060, 1118, 4,
	    680, 961, 214, 524, 220, 53, 4, 37, 718, 67, 12, 35, 861, 19, 21, 245, 143, 3, 0, 0, 0,
	    0, 0, 0, 0, 0, 2, 643, 1751, 64, 2420, 102, 102, 213, 4, 3490, 61, 115, 3482, 500, 16,
	    735, 97, 4, 10, 65, 1138, 42, 955, 834, 3, 0, 0, 0, 0, 0, 0, 0, 2, 643, 1751, 226, 245,
	    102, 102, 4, 3490, 61, 115, 3482, 500, 16, 735, 97, 4, 75, 2420, 735, 103, 3, 0, 0, 0,
	    0, 0, 0, 0, 0, 0, 0, 2, 643, 1751, 921, 276, 89, 56, 281, 500, 7, 2420, 735, 393, 2420,
	    450, 464, 143, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 643, 1751, 276, 89, 56,
	    281, 500, 7, 2420, 735, 393, 2420, 450, 464, 143, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	    0, 0, 0,
	    2, 615, 4260, 435, 500, 168, 735, 260, 4, 320, 735, 7, 445, 17, 984, 477, 69, 441, 109,
	    10, 11, 252, 7, 56, 788, 181, 3, 0, 0, 0, 0, 0, 2, 615, 4260, 168, 735, 260, 4, 320,
	    735, 7, 445, 17, 984, 477, 69, 441, 109, 10, 11, 252, 7, 56, 788, 181, 3, 0, 0, 0, 0, 0,
	    0, 0, 2, 615, 2785, 133, 189, 4, 680, 961, 214, 524, 220, 53, 4, 187, 2362, 1610, 1692,
	    67, 12, 35, 861, 19, 21, 245, 143, 3, 0, 0, 0, 0, 0, 0, 2, 219, 1301, 1060, 1118, 4,
	    680, 961, 214, 524, 220, 53, 4, 37, 718, 67, 12, 35, 861, 19, 21, 245, 143, 3, 0, 0, 0,
	    0, 0, 0, 0, 0, 2, 643, 1751, 64, 2420, 102, 102, 213, 4, 3490, 61, 115, 3482, 500, 16,
	    735, 97, 4, 10, 65, 1138, 42, 955, 834, 3, 0, 0, 0, 0, 0, 0, 0, 2, 643, 1751, 226, 245,
	    102, 102, 4, 3490, 61, 115, 3482, 500, 16, 735, 97, 4, 75, 2420, 735, 103, 3, 0, 0, 0,
	    0, 0, 0, 0, 0, 0, 0, 2, 643, 1751, 921, 276, 89, 56, 281, 500, 7, 2420, 735, 393, 2420,
	    450, 464, 143, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 643, 1751, 276, 89, 56,
	    281, 500, 7, 2420, 735, 393, 2420, 450, 464, 143, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	    0, 0, 0,
	    2, 615, 4260, 435, 500, 168, 735, 260, 4, 320, 735, 7, 445, 17, 984, 477, 69, 441, 109,
	    10, 11, 252, 7, 56, 788, 181, 3, 0, 0, 0, 0, 0, 2, 615, 4260, 168, 735, 260, 4, 320,
	    735, 7, 445, 17, 984, 477, 69, 441, 109, 10, 11, 252, 7, 56, 788, 181, 3, 0, 0, 0, 0, 0,
	    0, 0, 2, 615, 2785, 133, 189, 4, 680, 961, 214, 524, 220, 53, 4, 187, 2362, 1610, 1692,
	    67, 12, 35, 861, 19, 21, 245, 143, 3, 0, 0, 0, 0, 0, 0, 2, 219, 1301, 1060, 1118, 4,
	    680, 961, 214, 524, 220, 53, 4, 37, 718, 67, 12, 35, 861, 19, 21, 245, 143, 3, 0, 0, 0,
	    0, 0, 0, 0, 0, 2, 643, 1751, 64, 2420, 102, 102, 213, 4, 3490, 61, 115, 3482, 500, 16,
	    735, 97, 4, 10, 65, 1138, 42, 955, 834, 3, 0, 0, 0, 0, 0, 0, 0, 2, 643, 1751, 226, 245,
	    102, 102, 4, 3490, 61, 115, 3482, 500, 16, 735, 97, 4, 75, 2420, 735, 103, 3, 0, 0, 0,
	    0, 0, 0, 0, 0, 0, 0, 2, 643, 1751, 921, 276, 89, 56, 281, 500, 7, 2420, 735, 393, 2420,
	    450, 464, 143, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 643, 1751, 276, 89, 56,
	    281, 500, 7, 2420, 735, 393, 2420, 450, 464, 143, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	    0, 0, 0,
	    2, 615, 4260, 435, 500, 168, 735, 260, 4, 320, 735, 7, 445, 17, 984, 477, 69, 441, 109,
	    10, 11, 252, 7, 56, 788, 181, 3, 0, 0, 0, 0, 0, 2, 615, 4260, 168, 735, 260, 4, 320,
	    735, 7, 445, 17, 984, 477, 69, 441, 109, 10, 11, 252, 7, 56, 788, 181, 3, 0, 0, 0, 0, 0,
	    0, 0, 2, 615, 2785, 133, 189, 4, 680, 961, 214, 524, 220, 53, 4, 187, 2362, 1610, 1692,
	    67, 12, 35, 861, 19, 21, 245, 143, 3, 0, 0, 0, 0, 0, 0, 2, 219, 1301, 1060, 1118, 4,
	    680, 961, 214, 524, 220, 53, 4, 37, 718, 67, 12, 35, 861, 19, 21, 245, 143, 3, 0, 0, 0,
	    0, 0, 0, 0, 0, 2, 643, 1751, 64, 2420, 102, 102, 213, 4, 3490, 61, 115, 3482, 500, 16,
	    735, 97, 4, 10, 65, 1138, 42, 955, 834, 3, 0, 0, 0, 0, 0, 0, 0, 2, 643, 1751, 226, 245,
	    102, 102, 4, 3490, 61, 115, 3482, 500, 16, 735, 97, 4, 75, 2420, 735, 103, 3, 0, 0, 0,
	    0, 0, 0, 0, 0, 0, 0, 2, 643, 1751, 921, 276, 89, 56, 281, 500, 7, 2420, 735, 393, 2420,
	    450, 464, 143, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 643, 1751, 276, 89, 56,
	    281, 500, 7, 2420, 735, 393, 2420, 450, 464, 143, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	    0, 0, 0
    };
    auto start = std::chrono::high_resolution_clock::now();
    cudaMemcpyAsync(
        reinterpret_cast<int*>(thrust::raw_pointer_cast(d_input_.data())),
        host_input.data(), sizeof(int) * batch_size * batch_seq_len,
        cudaMemcpyHostToDevice, stream_);
    encoder_->run_one_infer(batch_size, batch_seq_len);
    lab::nmt::print_time_duration(start, "one infer time", stream_);
    lab::nmt::print_vec(d_ppl_.data(), "ppl", batch_size);
  }
  return 0;
}
